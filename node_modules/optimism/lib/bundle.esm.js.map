{"version":3,"file":"bundle.esm.js","sources":["../src/cache.ts","../src/context.ts","../src/entry.ts","../src/key-trie.ts","../src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K) {\n    return this.map.has(key);\n  }\n\n  public get(key: K) {\n    const entry = this.getEntry(key);\n    return entry && entry.value;\n  }\n\n  private getEntry(key: K): Node<K, V> | void {\n    const entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      const { older, newer } = entry;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older!.newer = entry;\n\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  }\n\n  public set(key: K, value: V) {\n    let entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n\n    this.map.set(key, entry);\n\n    return entry.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K) {\n    const entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\n\nconst reusableEmptyArray: AnyEntry[] = [];\nconst emptySetPool: Set<AnyEntry>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe?: () => any;\n  public reportOrphan?: (this: Entry<TArgs, TValue>) => any;\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n    public args: TArgs,\n  ) {\n    ++Entry.count;\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n\n    if (! rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0 as any;\n    }\n\n    return mightBeDirty(this)\n      ? reallyRecompute(this)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  const originalChildren = forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n  originalChildren.forEach(maybeReportOrphan);\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\nfunction maybeReportOrphan(entry: AnyEntry) {\n  return entry.parents.size === 0 &&\n    typeof entry.reportOrphan === \"function\" &&\n    entry.reportOrphan() === true;\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  let children = reusableEmptyArray;\n\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  }\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n\n  return children;\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n\nfunction maybeUnsubscribe(entry: AnyEntry) {\n  const { unsubscribe } = entry;\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\nexport class KeyTrie<K> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, KeyTrie<K>>;\n  private strong?: Map<any, KeyTrie<K>>;\n  private data?: K;\n\n  constructor(private readonly weakness: boolean) {}\n\n  public lookup<T extends any[]>(...array: T): K {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends any[]>(array: T): K {\n    let node: KeyTrie<K> = this;\n    array.forEach(key => node = node.getChildTrie(key));\n    return node.data || (node.data = Object.create(null));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, KeyTrie<K>>())\n      : this.strong || (this.strong = new Map<any, KeyTrie<K>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie<K>(this.weakness));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n","import { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\nimport { KeyTrie } from \"./key-trie\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new KeyTrie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TArgs) => void;\n};\n\nexport type OptimisticWrapOptions<TArgs extends any[]> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // If a wrapped function is \"disposable,\" then its creator does not\n  // care about its return value, and it should be removed from the cache\n  // immediately when it no longer has any parents that depend on it.\n  disposable?: boolean;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => (() => any) | undefined;\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const disposable = !! options.disposable;\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    if (disposable && ! parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0 as any;\n    }\n\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    const args = Array.prototype.slice.call(arguments) as TArgs;\n\n    let entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry<TArgs, TResult>(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n      if (disposable) {\n        entry.reportOrphan = () => cache.delete(key);\n      }\n    }\n\n    const value = entry.recompute();\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n    return disposable ? void 0 as any : value;\n  }\n\n  optimistic.dirty = function () {\n    const key = makeCacheKey.apply(null, arguments as any);\n    const child = key !== void 0 && cache.get(key);\n    if (child) {\n      child.setDirty();\n    }\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult>;\n}\n"],"names":[],"mappings":";;;AAOA,SAAS,cAAc,MAAK;AAE5B;IAKE,eACU,GAAc,EACf,OAAoD;QADnD,oBAAA,EAAA,cAAc;QACf,wBAAA,EAAA,wBAAoD;QADnD,QAAG,GAAH,GAAG,CAAW;QACf,YAAO,GAAP,OAAO,CAA6C;QANrD,QAAG,GAAG,IAAI,GAAG,EAAiB,CAAC;QAC/B,WAAM,GAAsB,IAAI,CAAC;QACjC,WAAM,GAAsB,IAAI,CAAC;KAKrC;IAEG,mBAAG,GAAV,UAAW,GAAM;QACf,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAC1B;IAEM,mBAAG,GAAV,UAAW,GAAM;QACf,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC;KAC7B;IAEO,wBAAQ,GAAhB,UAAiB,GAAM;QACrB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,IAAA,mBAAK,EAAE,mBAAK,CAAW;YAE/B,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACrB;YAED,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACrB;YAED,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1B,KAAK,CAAC,KAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YAE3B,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;gBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aACrB;SACF;QAED,OAAO,KAAK,CAAC;KACd;IAEM,mBAAG,GAAV,UAAW,GAAM,EAAE,KAAQ;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;SAC5B;QAED,KAAK,GAAG;YACN,GAAG,EAAE,GAAG;YACR,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,IAAI;YACX,KAAK,EAAE,IAAI,CAAC,MAAM;SACnB,CAAC;QAEF,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;SAC3B;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAEnC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAEzB,OAAO,KAAK,CAAC,KAAK,CAAC;KACpB;IAEM,qBAAK,GAAZ;QACE,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC9B;KACF;IAEM,sBAAM,GAAb,UAAc,GAAM;QAClB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,KAAK,EAAE;YACT,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;gBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;aAC3B;YAED,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;gBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;aAC3B;YAED,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aACjC;YAED,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aACjC;YAED,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAE/B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KACd;IACH,YAAC;CAAA,IAAA;;AC/GM,IAAM,eAAe,GAAG,IAAI,IAAI,EAAY,CAAC;;ACApD,IAAM,kBAAkB,GAAe,EAAE,CAAC;AAC1C,IAAM,YAAY,GAAoB,EAAE,CAAC;AACzC,IAAM,gBAAgB,GAAG,GAAG,CAAC;;;AAI7B,SAAS,MAAM,CAAC,SAAc,EAAE,eAAwB;IACtD,IAAI,CAAE,SAAS,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,eAAe,IAAI,mBAAmB,CAAC,CAAC;KACzD;CACF;AASD,SAAS,OAAO,CAAC,CAAa,EAAE,CAAa;IAC3C,IAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC;IACrB;;IAEE,GAAG,GAAG,CAAC;;QAEP,GAAG,KAAK,CAAC,CAAC,MAAM;;QAEhB,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EACzB;CACH;AAED,SAAS,QAAQ,CAAI,KAAe;IAClC,QAAQ,KAAK,CAAC,MAAM;QAClB,KAAK,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACzC,KAAK,CAAC,EAAE,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,KAAK,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;KACxB;CACF;AAED,SAAS,SAAS,CAAI,KAAe;IACnC,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAa,CAAC;CACnC;AAID;IAmBE,eACkB,EAA8B,EACvC,IAAW;QADF,OAAE,GAAF,EAAE,CAA4B;QACvC,SAAI,GAAJ,IAAI,CAAO;QAdJ,YAAO,GAAG,IAAI,GAAG,EAAY,CAAC;QAC9B,gBAAW,GAAG,IAAI,GAAG,EAAwB,CAAC;;;;QAKvD,kBAAa,GAAyB,IAAI,CAAC;QAE3C,UAAK,GAAG,IAAI,CAAC;QACb,gBAAW,GAAG,KAAK,CAAC;QACX,UAAK,GAAkB,EAAE,CAAC;QAMxC,EAAE,KAAK,CAAC,KAAK,CAAC;KACf;;;;;;;IAQM,yBAAS,GAAhB;QACE,MAAM,CAAC,CAAE,IAAI,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;QAElD,IAAI,CAAE,cAAc,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;;;;YAIrD,OAAO,KAAK,CAAQ,CAAC;SACtB;QAED,OAAO,YAAY,CAAC,IAAI,CAAC;cACrB,eAAe,CAAC,IAAI,CAAC;cACrB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC1B;IAEM,wBAAQ,GAAf;QACE,IAAI,IAAI,CAAC,KAAK;YAAE,OAAO;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,WAAW,CAAC,IAAI,CAAC,CAAC;;;;QAIlB,gBAAgB,CAAC,IAAI,CAAC,CAAC;KACxB;IAEM,uBAAO,GAAd;QAAA,iBAmBC;QAlBC,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAChD,gBAAgB,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;;;QAavB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACzB,MAAM,CAAC,QAAQ,EAAE,CAAC;YAClB,WAAW,CAAC,MAAM,EAAE,KAAI,CAAC,CAAC;SAC3B,CAAC,CAAC;KACJ;IA5Ea,WAAK,GAAG,CAAC,CAAC;IA6E1B,YAAC;CA9ED,IA8EC;AAED,SAAS,cAAc,CAAC,KAAe;IACrC,IAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAC;IAC1C,IAAI,MAAM,EAAE;QACV,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAE1B,IAAI,CAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACnC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACnC;QAED,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;YACvB,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACjC;aAAM;YACL,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACjC;QAED,OAAO,MAAM,CAAC;KACf;CACF;AAED,SAAS,eAAe,CAAC,KAAe;;;;IAItC,IAAM,gBAAgB,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;;IAG/C,eAAe,CAAC,SAAS,CAAC,KAAK,EAAE,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAE7D,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;;;QAGzB,QAAQ,CAAC,KAAK,CAAC,CAAC;KACjB;;;;IAKD,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAE5C,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAC9B;AAED,SAAS,iBAAiB,CAAC,KAAe;IACxC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;;IAEzB,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACvB,IAAI;;QAEF,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;KACnD;IAAC,OAAO,CAAC,EAAE;;QAEV,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KACpB;;IAED,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;CAC3B;AAED,SAAS,YAAY,CAAC,KAAe;IACnC,OAAO,KAAK,CAAC,KAAK,IAAI,CAAC,EAAE,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;CAC3E;AAED,SAAS,QAAQ,CAAC,KAAe;IAC/B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IAEpB,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;;;QAGvB,OAAO;KACR;IAED,WAAW,CAAC,KAAK,CAAC,CAAC;CACpB;AAED,SAAS,WAAW,CAAC,KAAe;IAClC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC;CAClE;AAED,SAAS,WAAW,CAAC,KAAe;IAClC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC;CAClE;;AAGD,SAAS,gBAAgB,CAAC,MAAgB,EAAE,KAAe;;;IAGzD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IAE5B,IAAI,CAAE,MAAM,CAAC,aAAa,EAAE;QAC1B,MAAM,CAAC,aAAa,GAAG,YAAY,CAAC,GAAG,EAAE,IAAI,IAAI,GAAG,CAAC;KAEtD;SAAM,IAAI,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;;;;QAI1C,OAAO;KACR;IAED,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAChC,WAAW,CAAC,MAAM,CAAC,CAAC;CACrB;;AAGD,SAAS,gBAAgB,CAAC,MAAgB,EAAE,KAAe;;;IAGzD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,CAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IAE9B,IAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC;IAClD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;KACvD;SAAM,IAAI,CAAE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE;QAC7C,MAAM,CAAC,QAAQ,EAAE,CAAC;KACnB;IAED,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAEhC,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;QACxB,OAAO;KACR;IAED,WAAW,CAAC,MAAM,CAAC,CAAC;CACrB;AAED,SAAS,gBAAgB,CAAC,MAAgB,EAAE,KAAe;IACzD,IAAM,EAAE,GAAG,MAAM,CAAC,aAAa,CAAC;IAChC,IAAI,EAAE,EAAE;QACN,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjB,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;YACjB,IAAI,YAAY,CAAC,MAAM,GAAG,gBAAgB,EAAE;gBAC1C,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACvB;YACD,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7B;KACF;CACF;;;;;;AAOD,SAAS,iBAAiB,CAAC,KAAe;IACxC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC;QAC7B,OAAO,KAAK,CAAC,YAAY,KAAK,UAAU;QACxC,KAAK,CAAC,YAAY,EAAE,KAAK,IAAI,CAAC;CACjC;;;AAID,SAAS,cAAc,CAAC,MAAgB;IACtC,IAAI,QAAQ,GAAG,kBAAkB,CAAC;IAElC,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,EAAE;QAC/B,QAAQ,GAAG,EAAE,CAAC;QACd,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,KAAK;YACvC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ;;;IAID,MAAM,CAAC,MAAM,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC;IAEtC,OAAO,QAAQ,CAAC;CACjB;AAED,SAAS,WAAW,CAAC,MAAgB,EAAE,KAAe;IACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;CACjC;AAED,SAAS,cAAc,CAAC,KAAe;IACrC,IAAI,OAAO,KAAK,CAAC,SAAS,KAAK,UAAU,EAAE;QACzC,IAAI;YACF,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxB,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;SAC7D;QAAC,OAAO,CAAC,EAAE;;;;;YAKV,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjB,OAAO,KAAK,CAAC;SACd;KACF;;;IAID,OAAO,IAAI,CAAC;CACb;AAED,SAAS,gBAAgB,CAAC,KAAe;IAC/B,IAAA,+BAAW,CAAW;IAC9B,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;QACrC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;QAC3B,WAAW,EAAE,CAAC;KACf;CACF;;ACzUD;;AAEA;IAQE,iBAA6B,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;KAAI;IAE3C,wBAAM,GAAb;QAA+B,eAAW;aAAX,UAAW,EAAX,qBAAW,EAAX,IAAW;YAAX,0BAAW;;QACxC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAChC;IAEM,6BAAW,GAAlB,UAAoC,KAAQ;QAC1C,IAAI,IAAI,GAAe,IAAI,CAAC;QAC5B,KAAK,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;KACvD;IAEO,8BAAY,GAApB,UAAqB,GAAQ;QAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC;cACtC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,EAAmB,CAAC;cACzD,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAmB,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK;YAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,OAAO,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChE,OAAO,KAAK,CAAC;KACd;IACH,cAAC;CAAA,IAAA;AAED,SAAS,QAAQ,CAAC,KAAU;IAC1B,QAAQ,OAAO,KAAK;QACpB,KAAK,QAAQ;YACX,IAAI,KAAK,KAAK,IAAI;gBAAE,MAAM;;QAE5B,KAAK,UAAU;YACb,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;CACd;;ACnBD;;;;;;;AAOA,IAAM,OAAO,GAAG,IAAI,OAAO,CAAY,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC;AACtE,SAAgB,mBAAmB;IAAC,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,yBAAc;;IAChD,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;CAClC;AAED,AA+BA,IAAM,MAAM,GAAG,IAAI,GAAG,EAA8B,CAAC;AAErD,SAAgB,IAAI,CAIlB,gBAA6C,EAC7C,OAA2D;IAA3D,wBAAA,EAAA,UAAwC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAE3D,IAAM,KAAK,GAAG,IAAI,KAAK,CACrB,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAC9B,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,OAAO,EAAE,GAAA,CACzB,CAAC;IAEF,IAAM,UAAU,GAAG,CAAC,CAAE,OAAO,CAAC,UAAU,CAAC;IACzC,IAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,mBAAmB,CAAC;IAEjE,SAAS,UAAU;QACjB,IAAI,UAAU,IAAI,CAAE,eAAe,CAAC,QAAQ,EAAE,EAAE;;;;;;YAM9C,OAAO,KAAK,CAAQ,CAAC;SACtB;QAED,IAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAgB,CAAC,CAAC;QACvD,IAAI,GAAG,KAAK,KAAK,CAAC,EAAE;YAClB,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,SAAgB,CAAC,CAAC;SACvD;QAED,IAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAU,CAAC;QAE5D,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;SACnB;aAAM;YACL,KAAK,GAAG,IAAI,KAAK,CAAiB,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC1D,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACtB,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;YACpC,IAAI,UAAU,EAAE;gBACd,KAAK,CAAC,YAAY,GAAG,cAAM,OAAA,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAA,CAAC;aAC9C;SACF;QAED,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;;;QAIhC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAEtB,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;;;QAKlB,IAAI,CAAE,eAAe,CAAC,QAAQ,EAAE,EAAE;YAChC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,EAAE,GAAA,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,EAAE,CAAC;SAChB;;;;QAKD,OAAO,UAAU,GAAG,KAAK,CAAQ,GAAG,KAAK,CAAC;KAC3C;IAED,UAAU,CAAC,KAAK,GAAG;QACjB,IAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAgB,CAAC,CAAC;QACvD,IAAM,KAAK,GAAG,GAAG,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,QAAQ,EAAE,CAAC;SAClB;KACF,CAAC;IAEF,OAAO,UAAuD,CAAC;CAChE;;;;"}