{"version":3,"file":"bundle.umd.js","sources":["../src/httpLink.ts"],"sourcesContent":["/* tslint:disable */\n\nimport { ApolloLink, Observable, RequestHandler, fromError } from 'apollo-link';\nimport {\n  serializeFetchParameter,\n  selectURI,\n  parseAndCheckHttpResponse,\n  checkFetcher,\n  selectHttpOptionsAndBody,\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  Body,\n  HttpOptions,\n  UriFunction as _UriFunction,\n} from 'apollo-link-http-common';\nimport { DefinitionNode } from 'graphql';\n\nexport namespace HttpLink {\n  //TODO Would much rather be able to export directly\n  export interface UriFunction extends _UriFunction {}\n  export interface Options extends HttpOptions {\n    /**\n     * If set to true, use the HTTP GET method for query operations. Mutations\n     * will still use the method specified in fetchOptions.method (which defaults\n     * to POST).\n     */\n    useGETForQueries?: boolean;\n  }\n}\n\n// For backwards compatibility.\nexport import FetchOptions = HttpLink.Options;\nexport import UriFunction = HttpLink.UriFunction;\n\nexport const createHttpLink = (linkOptions: HttpLink.Options = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    let controller;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(opts?: HttpLink.Options) {\n    super(createHttpLink(opts).request);\n  }\n}\n"],"names":["checkFetcher","ApolloLink","selectURI","fromError","serializeFetchParameter","Observable","parseAndCheckHttpResponse","tslib_1.__extends"],"mappings":"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"}